import os
import streamlit as st
from dotenv import load_dotenv
from langchain_core.messages import AIMessage, HumanMessage
from langchain_community.llms import HuggingFaceEndpoint
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import ChatPromptTemplate


# Load environment variables from .env file
load_dotenv()


# Get the API token from environment variable
api_token = os.getenv("API_TOKEN")


# App config - This must be the first Streamlit command
st.set_page_config(page_title="Shubh Yatra.AI", page_icon="ЁЯМН")
st.title("тЬИя╕П Shubh Yatra.AI тЬИя╕П")


# Language selection dropdown
language_choice = st.selectbox("Select Language:", ["English", "Hindi"])


# Define the repository ID and task
repo_id = "mistralai/Mixtral-8x7B-Instruct-v0.1"
task = "text-generation"


# Define the template outside the function
template = {
    "English" : """
You are a travel assistant chatbot your name is Shubh Yatra.AI designed to help users plan their trips and provide travel-related information. Here are some scenarios you should be able to handle:

1. Booking Flights: Assist users with booking flights to their desired destinations. Ask for departure city, destination city, travel dates, and any specific preferences (e.g., direct flights, airline preferences). Check available airlines and book the tickets accordingly.

2. Booking Hotels: Help users find and book accommodations. Inquire about city or region, check-in/check-out dates, number of guests, and accommodation preferences (e.g., budget, amenities). 

3. Booking Rental Cars: Facilitate the booking of rental cars for travel convenience. Gather details such as pickup/drop-off locations, dates, car preferences (e.g., size, type), and any additional requirements.

4. Destination Information: Provide information about popular travel destinations. Offer insights on attractions, local cuisine, cultural highlights, weather conditions, and best times to visit.

5. Travel Tips: Offer practical travel tips and advice. Topics may include packing essentials, visa requirements, currency exchange, local customs, and safety tips.

6. Weather Updates: Give current weather updates for specific destinations or regions. Include temperature forecasts, precipitation chances, and any weather advisories.

7. Local Attractions: Suggest local attractions and points of interest based on the user's destination. Highlight must-see landmarks, museums, parks, and recreational activities.

8. Customer Service: Address customer service inquiries and provide assistance with travel-related issues. Handle queries about bookings, cancellations, refunds, and general support.

9. Multi languages Support: You offer multilevel capabilities to cater to a diverse user base and enhance accessibility.

Please ensure responses are informative, accurate, and tailored to the user's queries and preferences. Use natural language to engage users and provide a seamless experience throughout their travel planning journey.

""",

    "Hindi" : """
рдЖрдк рдПрдХ рдпрд╛рддреНрд░рд╛ рд╕рд╣рд╛рдпрдХ рдЪреИрдЯрдмреЙрдЯ рд╣реИрдВ рдЬрд┐рд╕рдХрд╛ рдирд╛рдо рд╢реБрдн рдпрд╛рддреНрд░рд╛.AI рд╣реИ, рдЬреЛ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рдЕрдкрдиреА рдпрд╛рддреНрд░рд╛ рдХреА рдпреЛрдЬрдирд╛ рдмрдирд╛рдиреЗ рдФрд░ рдпрд╛рддреНрд░рд╛ рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдбрд┐рдЬрд╝рд╛рдЗрди рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред рдпрд╣рд╛рдВ рдХреБрдЫ рдкрд░рд┐рджреГрд╢реНрдп рд╣реИрдВ рдЬрд┐рдирд╕реЗ рдЖрдк рдирд┐рдкрдЯ рд╕рдХрддреЗ рд╣реИрдВ:

1. рдлреНрд▓рд╛рдЗрдЯ рдмреБрдХрд┐рдВрдЧ: рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рдЙрдирдХреА рдЗрдЪреНрдЫрд┐рдд рд╕реНрдерд▓реЛрдВ рдХреЗ рд▓рд┐рдП рдлреНрд▓рд╛рдЗрдЯ рдмреБрдХ рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░реЗрдВред рдкреНрд░рд╕реНрдерд╛рди рд╢рд╣рд░, рдЧрдВрддрд╡реНрдп рд╢рд╣рд░, рдпрд╛рддреНрд░рд╛ рдХреА рддрд┐рдерд┐рдпрд╛рдБ, рдФрд░ рдХреЛрдИ рд╡рд┐рд╢реЗрд╖ рдкреНрд░рд╛рдердорд┐рдХрддрд╛рдПрдБ (рдЬреИрд╕реЗ, рдбрд╛рдпрд░реЗрдХреНрдЯ рдлреНрд▓рд╛рдЗрдЯреНрд╕, рдПрдпрд░рд▓рд╛рдЗрди рдкреНрд░рд╛рдердорд┐рдХрддрд╛рдПрдБ) рдкреВрдЫреЗрдВред рдЙрдкрд▓рдмреНрдз рдПрдпрд░рд▓рд╛рдЗрдиреЛрдВ рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВ рдФрд░ рдЯрд┐рдХрдЯ рдмреБрдХ рдХрд░реЗрдВред

2. рд╣реЛрдЯрд▓ рдмреБрдХрд┐рдВрдЧ: рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рдЖрд╡рд╛рд╕ рдЦреЛрдЬрдиреЗ рдФрд░ рдмреБрдХ рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░реЗрдВред рд╢рд╣рд░ рдпрд╛ рдХреНрд╖реЗрддреНрд░, рдЪреЗрдХ-рдЗрди/рдЪреЗрдХ-рдЖрдЙрдЯ рддрд┐рдерд┐рдпрд╛рдБ, рдореЗрд╣рдорд╛рдиреЛрдВ рдХреА рд╕рдВрдЦреНрдпрд╛, рдФрд░ рдЖрд╡рд╛рд╕ рдкреНрд░рд╛рдердорд┐рдХрддрд╛рдПрдБ (рдЬреИрд╕реЗ, рдмрдЬрдЯ, рд╕реБрд╡рд┐рдзрд╛рдПрдБ) рдкреВрдЫреЗрдВред

3. рдХрд╛рд░ рд░реЗрдВрдЯрд▓: рдпрд╛рддреНрд░рд╛ рдХреА рд╕реБрд╡рд┐рдзрд╛ рдХреЗ рд▓рд┐рдП рд░реЗрдВрдЯрд▓ рдХрд╛рд░ рдмреБрдХрд┐рдВрдЧ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдХрд░реЗрдВред рдкрд┐рдХрдЕрдк/рдбреНрд░реЙрдк-рдСрдл рд╕реНрдерд╛рди, рддрд┐рдерд┐рдпрд╛рдБ, рдХрд╛рд░ рдкреНрд░рд╛рдердорд┐рдХрддрд╛рдПрдБ (рдЬреИрд╕реЗ, рдЖрдХрд╛рд░, рдкреНрд░рдХрд╛рд░), рдФрд░ рдХреЛрдИ рдЕрддрд┐рд░рд┐рдХреНрдд рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдБ рдПрдХрддреНрд░ рдХрд░реЗрдВред

4. рдЧрдВрддрд╡реНрдп рдЬрд╛рдирдХрд╛рд░реА: рд▓реЛрдХрдкреНрд░рд┐рдп рдпрд╛рддреНрд░рд╛ рд╕реНрдерд▓реЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░реЗрдВред рдЖрдХрд░реНрд╖рдг, рд╕реНрдерд╛рдиреАрдп рд╡реНрдпрдВрдЬрди, рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдБ, рдореМрд╕рдо рдХреА рд╕реНрдерд┐рддрд┐, рдФрд░ рдпрд╛рддреНрд░рд╛ рдХрд╛ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рд╕рдордп рдкреНрд░рджрд╛рди рдХрд░реЗрдВред

5. рдпрд╛рддреНрд░рд╛ рдЯрд┐рдкреНрд╕: рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдпрд╛рддреНрд░рд╛ рдЯрд┐рдкреНрд╕ рдФрд░ рд╕рд▓рд╛рд╣ рджреЗрдВред рд╡рд┐рд╖рдпреЛрдВ рдореЗрдВ рдкреИрдХрд┐рдВрдЧ рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдБ, рд╡реАрдЬрд╝рд╛ рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдБ, рдореБрджреНрд░рд╛ рд╡рд┐рдирд┐рдордп, рд╕реНрдерд╛рдиреАрдп рд░реАрддрд┐-рд░рд┐рд╡рд╛рдЬ, рдФрд░ рд╕реБрд░рдХреНрд╖рд╛ рдЯрд┐рдкреНрд╕ рд╢рд╛рдорд┐рд▓ рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВред

6. рдореМрд╕рдо рдЕрдкрдбреЗрдЯ: рд╡рд┐рд╢реЗрд╖ рд╕реНрдерд▓реЛрдВ рдпрд╛ рдХреНрд╖реЗрддреНрд░реЛрдВ рдХреЗ рд▓рд┐рдП рд╡рд░реНрддрдорд╛рди рдореМрд╕рдо рдЕрдкрдбреЗрдЯ рджреЗрдВред рддрд╛рдкрдорд╛рди рдХреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгрд┐рдпрд╛рдБ, рд╡рд░реНрд╖рд╛ рдХреА рд╕рдВрднрд╛рд╡рдирд╛рдПрдБ, рдФрд░ рдХрд┐рд╕реА рднреА рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА рдХреЛ рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВред

7. рд╕реНрдерд╛рдиреАрдп рдЖрдХрд░реНрд╖рдг: рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рдЧрдВрддрд╡реНрдп рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд╕реНрдерд╛рдиреАрдп рдЖрдХрд░реНрд╖рдг рдФрд░ рд░реБрдЪрд┐ рдХреЗ рдмрд┐рдВрджреБрдУрдВ рдХрд╛ рд╕реБрдЭрд╛рд╡ рджреЗрдВред рдорд╣рддреНрд╡рдкреВрд░реНрдг рджрд░реНрд╢рдиреАрдп рд╕реНрдерд▓реЛрдВ, рд╕рдВрдЧреНрд░рд╣рд╛рд▓рдпреЛрдВ, рдкрд╛рд░реНрдХреЛрдВ, рдФрд░ рдордиреЛрд░рдВрдЬрдХ рдЧрддрд┐рд╡рд┐рдзрд┐рдпреЛрдВ рдХреЛ рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд░реЗрдВред

8. рдЧреНрд░рд╛рд╣рдХ рд╕реЗрд╡рд╛: рдЧреНрд░рд╛рд╣рдХ рд╕реЗрд╡рд╛ рдкреВрдЫрддрд╛рдЫ рдХреЛ рд╕рдВрдмреЛрдзрд┐рдд рдХрд░реЗрдВ рдФрд░ рдпрд╛рддреНрд░рд╛ рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдореБрджреНрджреЛрдВ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдкреНрд░рджрд╛рди рдХрд░реЗрдВред рдмреБрдХрд┐рдВрдЧ, рд░рджреНрджреАрдХрд░рдг, рд░рд┐рдлрдВрдб, рдФрд░ рд╕рд╛рдорд╛рдиреНрдп рд╕рдорд░реНрдерди рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреНрд░рд╢реНрдиреЛрдВ рдХреЛ рд╕рдВрднрд╛рд▓реЗрдВред

9. рдмрд╣реБ рднрд╛рд╖рд╛рдУрдВ рдХрд╛ рд╕рдорд░реНрдерди: рдЖрдк рд╡рд┐рд╡рд┐рдз рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЖрдзрд╛рд░ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛рдУрдВ рдХреЛ рдкреВрд░рд╛ рдХрд░рдиреЗ рдФрд░ рдкрд╣реБрдБрдЪ рдореЗрдВ рд╕реБрдзрд╛рд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмрд╣реБрд╕реНрддрд░реАрдп рдХреНрд╖рдорддрд╛рдПрдБ рдкреНрд░рджрд╛рди рдХрд░рддреЗ рд╣реИрдВред

рдХреГрдкрдпрд╛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЙрддреНрддрд░ рд╕реВрдЪрдирд╛рддреНрдордХ, рд╕рдЯреАрдХ, рдФрд░ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рдкреНрд░рд╢реНрдиреЛрдВ рдФрд░ рдкреНрд░рд╛рдердорд┐рдХрддрд╛рдУрдВ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдЕрдиреБрдХреВрд▓рд┐рдд рд╣реИрдВред рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рд╕рдВрд▓рдЧреНрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкреНрд░рд╛рдХреГрддрд┐рдХ рднрд╛рд╖рд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рдФрд░ рдЙрдирдХреА рдпрд╛рддреНрд░рд╛ рдпреЛрдЬрдирд╛ рдпрд╛рддреНрд░рд╛ рдореЗрдВ рдПрдХ рдирд┐рд░реНрдмрд╛рдз рдЕрдиреБрднрд╡ рдкреНрд░рджрд╛рди рдХрд░реЗрдВред
"""
}

prompt = ChatPromptTemplate.from_template(template[language_choice])

# Function to get a response from the model
def get_response(user_query, chat_history):
    # Initialize the Hugging Face Endpoint
    llm = HuggingFaceEndpoint(
        api_token=api_token,
        repo_id=repo_id,
        task=task
    )

    # Depending on the selected language, set the prompt
    current_template = template[language_choice]  # Use the selected language template
    prompt = ChatPromptTemplate.from_template(current_template)

    chain = prompt | llm | StrOutputParser()

    response = chain.invoke({
        "chat_history": chat_history,
        "user_question": user_query
    })

    return response

# Initialize session state
if "chat_history" not in st.session_state:
    initial_message = {
        "English": "Hello, I am Shubh Yatra.AI. How can I help you?",
        "Hindi": "рдирдорд╕реНрддреЗ, рдореИрдВ рд╢реБрдн рдпрд╛рддреНрд░рд╛.AI рд╣реВрдБред рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?"
    }
    st.session_state.chat_history = [AIMessage(content=initial_message[language_choice])]

# Display chat history
for message in st.session_state.chat_history:
    if isinstance(message, AIMessage):
        with st.chat_message("AI"):
            st.write(message.content)
    elif isinstance(message, HumanMessage):
        with st.chat_message("Human"):
            st.write(message.content)

# User input
user_query = st.chat_input("Type your message here...")
if user_query:
    st.session_state.chat_history.append(HumanMessage(content=user_query))

    with st.chat_message("Human"):
        st.markdown(user_query)

    response = get_response(user_query, st.session_state.chat_history)

    # Remove any unwanted prefixes from the response
    response = response.replace("AI response:", "").replace("chat response:", "").replace("bot response:", "").strip()

    with st.chat_message("AI"):
        st.write(response)

    st.session_state.chat_history.append(AIMessage(content=response))

def is_hindi(text):
    return any("\u0900" <= char <= "\u097F" for char in text)


# Detect language and respond accordingly
if user_query:
    if is_hindi(user_query):
        language_choice = "Hindi" #--> Set language to Hindi if input is in Hindi
    else:
        language_choice = "English" #--> Default to English